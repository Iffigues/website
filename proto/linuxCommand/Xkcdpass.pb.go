// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/Xkcdpass.proto

package linuxCommand

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Xkcdpass struct {
	Verbose              bool     `protobuf:"varint,1,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	Min                  string   `protobuf:"bytes,2,opt,name=Min,proto3" json:"Min,omitempty"`
	Max                  string   `protobuf:"bytes,3,opt,name=Max,proto3" json:"Max,omitempty"`
	Numwords             string   `protobuf:"bytes,4,opt,name=Numwords,proto3" json:"Numwords,omitempty"`
	ValidChars           string   `protobuf:"bytes,5,opt,name=ValidChars,proto3" json:"ValidChars,omitempty"`
	Acrostic             string   `protobuf:"bytes,6,opt,name=Acrostic,proto3" json:"Acrostic,omitempty"`
	Count                string   `protobuf:"bytes,7,opt,name=count,proto3" json:"count,omitempty"`
	Delimiter            string   `protobuf:"bytes,8,opt,name=Delimiter,proto3" json:"Delimiter,omitempty"`
	Separator            string   `protobuf:"bytes,9,opt,name=Separator,proto3" json:"Separator,omitempty"`
	Case                 string   `protobuf:"bytes,10,opt,name=Case,proto3" json:"Case,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Xkcdpass) Reset()         { *m = Xkcdpass{} }
func (m *Xkcdpass) String() string { return proto.CompactTextString(m) }
func (*Xkcdpass) ProtoMessage()    {}
func (*Xkcdpass) Descriptor() ([]byte, []int) {
	return fileDescriptor_bef946cd8bca2d8a, []int{0}
}

func (m *Xkcdpass) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Xkcdpass.Unmarshal(m, b)
}
func (m *Xkcdpass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Xkcdpass.Marshal(b, m, deterministic)
}
func (m *Xkcdpass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Xkcdpass.Merge(m, src)
}
func (m *Xkcdpass) XXX_Size() int {
	return xxx_messageInfo_Xkcdpass.Size(m)
}
func (m *Xkcdpass) XXX_DiscardUnknown() {
	xxx_messageInfo_Xkcdpass.DiscardUnknown(m)
}

var xxx_messageInfo_Xkcdpass proto.InternalMessageInfo

func (m *Xkcdpass) GetVerbose() bool {
	if m != nil {
		return m.Verbose
	}
	return false
}

func (m *Xkcdpass) GetMin() string {
	if m != nil {
		return m.Min
	}
	return ""
}

func (m *Xkcdpass) GetMax() string {
	if m != nil {
		return m.Max
	}
	return ""
}

func (m *Xkcdpass) GetNumwords() string {
	if m != nil {
		return m.Numwords
	}
	return ""
}

func (m *Xkcdpass) GetValidChars() string {
	if m != nil {
		return m.ValidChars
	}
	return ""
}

func (m *Xkcdpass) GetAcrostic() string {
	if m != nil {
		return m.Acrostic
	}
	return ""
}

func (m *Xkcdpass) GetCount() string {
	if m != nil {
		return m.Count
	}
	return ""
}

func (m *Xkcdpass) GetDelimiter() string {
	if m != nil {
		return m.Delimiter
	}
	return ""
}

func (m *Xkcdpass) GetSeparator() string {
	if m != nil {
		return m.Separator
	}
	return ""
}

func (m *Xkcdpass) GetCase() string {
	if m != nil {
		return m.Case
	}
	return ""
}

func init() {
	proto.RegisterType((*Xkcdpass)(nil), "linuxCommand.Xkcdpass")
}

func init() {
	proto.RegisterFile("proto/Xkcdpass.proto", fileDescriptor_bef946cd8bca2d8a)
}

var fileDescriptor_bef946cd8bca2d8a = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x3f, 0x4b, 0xc4, 0x40,
	0x10, 0xc5, 0xbd, 0xff, 0xc9, 0x28, 0x7a, 0x2c, 0x87, 0x0e, 0x41, 0xe4, 0xb8, 0xea, 0xaa, 0x08,
	0x5a, 0xda, 0xa8, 0x11, 0xac, 0xb4, 0x48, 0xe0, 0x10, 0xbb, 0xbd, 0x64, 0xc0, 0xc5, 0x24, 0x1b,
	0x76, 0x37, 0x9a, 0x4f, 0xe0, 0xe7, 0x96, 0x6c, 0x6e, 0x63, 0xec, 0xe6, 0xfd, 0x7e, 0xf3, 0x9a,
	0x07, 0xab, 0x4a, 0x49, 0x23, 0xaf, 0xdf, 0x3e, 0xd3, 0xac, 0xe2, 0x5a, 0x87, 0x36, 0xb2, 0x93,
	0x5c, 0x94, 0x75, 0x13, 0xc9, 0xa2, 0xe0, 0x65, 0x16, 0x1c, 0x7e, 0x62, 0xd2, 0x95, 0x2c, 0x35,
	0x75, 0x3f, 0x9b, 0x9f, 0x31, 0x78, 0xae, 0xc6, 0x10, 0x16, 0x3b, 0x52, 0x7b, 0xa9, 0x09, 0x47,
	0xeb, 0xd1, 0xd6, 0x8b, 0x5d, 0x64, 0x4b, 0x98, 0xbc, 0x88, 0x12, 0xc7, 0xeb, 0xd1, 0xd6, 0x8f,
	0xdb, 0xd3, 0x12, 0xde, 0xe0, 0xe4, 0x40, 0x78, 0xc3, 0x02, 0xf0, 0x5e, 0xeb, 0xe2, 0x5b, 0xaa,
	0x4c, 0xe3, 0xd4, 0xe2, 0x3e, 0xb3, 0x2b, 0x80, 0x1d, 0xcf, 0x45, 0x16, 0x7d, 0x70, 0xa5, 0x71,
	0x66, 0xed, 0x80, 0xb4, 0xdd, 0x87, 0x54, 0x49, 0x6d, 0x44, 0x8a, 0xf3, 0xae, 0xeb, 0x32, 0x5b,
	0xc1, 0x2c, 0x95, 0x75, 0x69, 0x70, 0x61, 0x45, 0x17, 0xd8, 0x25, 0xf8, 0x4f, 0x94, 0x8b, 0x42,
	0x18, 0x52, 0xe8, 0x59, 0xf3, 0x07, 0x5a, 0x9b, 0x50, 0xc5, 0x15, 0x37, 0x52, 0xa1, 0xdf, 0xd9,
	0x1e, 0x30, 0x06, 0xd3, 0x88, 0x6b, 0x42, 0xb0, 0xc2, 0xde, 0x37, 0x09, 0x9c, 0xb9, 0x1d, 0x12,
	0x52, 0x5f, 0x22, 0x25, 0x76, 0x0f, 0xc7, 0xcf, 0x64, 0xfa, 0x75, 0xce, 0xc3, 0xe1, 0x9e, 0xa1,
	0xe3, 0xc1, 0xc5, 0x7f, 0xee, 0x06, 0xd6, 0x9b, 0xa3, 0xc7, 0xe5, 0xfb, 0x69, 0x78, 0x37, 0xb4,
	0xfb, 0xb9, 0x9d, 0xfd, 0xf6, 0x37, 0x00, 0x00, 0xff, 0xff, 0x67, 0x0e, 0xe6, 0xcc, 0xb2, 0x01,
	0x00, 0x00,
}
