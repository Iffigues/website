// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/Xkcdpass.proto

package linuxCommand

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// XkcdpassServiceClient is the client API for XkcdpassService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XkcdpassServiceClient interface {
	GetXkcdpass(ctx context.Context, in *Xkcdpass, opts ...grpc.CallOption) (*Responses, error)
}

type xkcdpassServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewXkcdpassServiceClient(cc grpc.ClientConnInterface) XkcdpassServiceClient {
	return &xkcdpassServiceClient{cc}
}

func (c *xkcdpassServiceClient) GetXkcdpass(ctx context.Context, in *Xkcdpass, opts ...grpc.CallOption) (*Responses, error) {
	out := new(Responses)
	err := c.cc.Invoke(ctx, "/linuxCommand.XkcdpassService/GetXkcdpass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XkcdpassServiceServer is the server API for XkcdpassService service.
// All implementations must embed UnimplementedXkcdpassServiceServer
// for forward compatibility
type XkcdpassServiceServer interface {
	GetXkcdpass(context.Context, *Xkcdpass) (*Responses, error)
	mustEmbedUnimplementedXkcdpassServiceServer()
}

// UnimplementedXkcdpassServiceServer must be embedded to have forward compatible implementations.
type UnimplementedXkcdpassServiceServer struct {
}

func (UnimplementedXkcdpassServiceServer) GetXkcdpass(context.Context, *Xkcdpass) (*Responses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetXkcdpass not implemented")
}
func (UnimplementedXkcdpassServiceServer) mustEmbedUnimplementedXkcdpassServiceServer() {}

// UnsafeXkcdpassServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XkcdpassServiceServer will
// result in compilation errors.
type UnsafeXkcdpassServiceServer interface {
	mustEmbedUnimplementedXkcdpassServiceServer()
}

func RegisterXkcdpassServiceServer(s grpc.ServiceRegistrar, srv XkcdpassServiceServer) {
	s.RegisterService(&XkcdpassService_ServiceDesc, srv)
}

func _XkcdpassService_GetXkcdpass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Xkcdpass)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XkcdpassServiceServer).GetXkcdpass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linuxCommand.XkcdpassService/GetXkcdpass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XkcdpassServiceServer).GetXkcdpass(ctx, req.(*Xkcdpass))
	}
	return interceptor(ctx, in, info, handler)
}

// XkcdpassService_ServiceDesc is the grpc.ServiceDesc for XkcdpassService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XkcdpassService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "linuxCommand.XkcdpassService",
	HandlerType: (*XkcdpassServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetXkcdpass",
			Handler:    _XkcdpassService_GetXkcdpass_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/Xkcdpass.proto",
}
